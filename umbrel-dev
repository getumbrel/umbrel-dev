#!/usr/bin/env bash
set -euo pipefail

show_help() {
  cat << EOF
umbrel-dev 1.2.0

Automatically initialize and manage an Umbrel development environment.

Usage: umbrel-dev <command> [options]

Commands:
    help                    Show this help message
    init                    Initialize an Umbrel development environment in the working directory
    boot                    Boot the development VM
    shutdown                Shutdown the development VM
    destroy                 Destroy the development VM
    containers              List container services
    rebuild <container>     Rebuild a container service
    reload                  Reloads the Umbrel service
    app <command> [options] Manages apps installations
    logs                    Stream Umbrel logs
    run <command>           Run a command inside the development VM
    ssh                     Get an SSH session inside the development VM
EOF
}

# Get gnu sed
gnused=sed
if [[ "$(uname)" == "Darwin" ]]; then
  if ! command -v gsed >/dev/null 2>&1; then
    echo "Error: This script requires gnu-sed!"
    echo "Install it with:"
    echo "  brew install gnu-sed"
    exit 1
  fi
  gnused=gsed
fi

# Check required dependencies are installed
# If not, fail with instructions on how to fix
check_dependencies() {
  for cmd in "git" "vagrant" "vboxmanage"; do
    if ! command -v $cmd >/dev/null 2>&1; then
      echo "This script requires Git, VirtualBox and Vagrant to be installed."
      echo
      echo "If you use Homebrew you can install them with:"
      echo
      echo "  brew install git"
      echo "  brew cask install virtualbox vagrant"
      echo
      echo "Otherwise see:"
      echo
      echo "  https://git-scm.com/downloads"
      echo "  https://virtualbox.org/wiki/Downloads"
      echo "  https://www.vagrantup.com/downloads.html"
      exit 1
    fi
  done
}

# Run a command inside the development VM
run_in_vm() {
  vagrant ssh -c "cd /vagrant/getumbrel/umbrel && $1"
}

# Get script location and correctly handle any symlinks
get_script_location() {
  source="${BASH_SOURCE[0]}"
  # Resolve $source until the file is no longer a symlink
  while [ -h "$source" ]; do
    dir="$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)"
    source="$(readlink "$source")"
    # If $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    [[ $source != /* ]] && source="$dir/$source"
  done
  dir="$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)"
  echo $dir
}

check_umbrel_dev_environment() {
  filename=".umbrel-dev"
  dir=$PWD
  while [ ! -e "$dir/$filename" ]; do
    dir=${dir%/*}
    if [[ "$dir" = "" ]]; then
      echo "Error: This doesn't seem to be an umbrel-dev environment."
      exit 1
    fi
  done
}

# Check deps before running any commands
check_dependencies

if [ -z ${1+x} ]; then
  command=""
else
  command="$1"
fi

# Initialize an Umbrel development environment in the working directory
if [[ "$command" = "init" ]]; then
  if [[ "$(ls -A)" ]]; then
    echo "Working directory must be empty!"
    exit 1
  fi

  echo "Creating Vagrantfile..."
  cp "$(get_script_location)/Vagrantfile" .

  echo
  vagrant plugin install --local vagrant-vbguest --plugin-version=0.24.0

  echo
  echo "Cloning container repositories..."
  repos="getumbrel/umbrel getumbrel/umbrel-dashboard getumbrel/umbrel-manager getumbrel/umbrel-middleware"
  for repo in $repos; do
    echo
    git clone "https://github.com/$repo.git" "$repo"
    if [[ "$repo" == "getumbrel/umbrel" ]]; then
      echo
      echo "Adding Docker Compose overrides to $repo..."
      cp "$(get_script_location)/docker-compose.override.yml" "$repo/"
    fi
  done

  touch .umbrel-dev

  echo
  echo "Your development environment is now setup"
  echo "You can boot your development VM with:"
  echo
  echo "  umbrel-dev boot"
  exit
fi

# Boot the development VM
if [[ "$command" = "boot" ]]; then
  check_umbrel_dev_environment

  # Update some packages on boot to prevent issues with vagrant-vbguest.
  # https://github.com/dotless-de/vagrant-vbguest/issues/351#issuecomment-545391139
  vagrant up --no-provision || true # This will sometimes fail
  vagrant ssh -c "sudo apt-get update -y && sudo apt-get install -y build-essential linux-headers-amd64 linux-image-amd64 python-pip"
  vagrant halt

  vagrant up
  exit
fi

# Shutdown the development VM
if [[ "$command" = "shutdown" ]]; then
  check_umbrel_dev_environment
  vagrant halt
  exit
fi

# Destroy the development VM
if [[ "$command" = "destroy" ]]; then
  check_umbrel_dev_environment
  echo "Warning: This will completely remove the VM meaning it needs to be recreated on next boot."
  echo "If you just want to stop the VM run: umbrel-dev shutdown"
  vagrant destroy
  exit
fi

# List container services
if [[ "$command" = "containers" ]]; then
  check_umbrel_dev_environment
  run_in_vm "docker-compose config --services"
  exit
fi

# Rebuild a container service
if [[ "$command" = "rebuild" ]]; then
  check_umbrel_dev_environment
  if [ -z ${2+x} ]; then
    echo "A second argument is required!"
    exit 1
  fi
  container="$2"
  run_in_vm "                           \
       docker-compose build $container  \
    && docker-compose stop $container   \
    && docker-compose rm -f $container  \
    && DEVICE_HOSTS=http://umbrel-dev.local docker-compose up -d $container"
  exit
fi

# Rebuild a container service
if [[ "$command" = "reload" ]]; then
  check_umbrel_dev_environment
  echo "Reloading the Umbrel service..."
  echo
  run_in_vm "                  \
       sudo scripts/stop       \
    && sudo scripts/configure  \
    && sudo scripts/start"
  exit
fi

# Rebuild a container service
if [[ "$command" = "app" ]]; then
  check_umbrel_dev_environment
  if [ -z ${2+x} ]; then
    args=""
  else
    args="${@:2}"
  fi
  run_in_vm "scripts/app ${args}"
  exit
fi

# Stream Umbrel logs
if [[ "$command" = "logs" ]]; then
  check_umbrel_dev_environment
  while true; do
    run_in_vm "docker-compose logs -f" || {
      echo "$(date +"%T") Trying again in 1 second..."
    }
    sleep 1
  done
  exit
fi

# Run a command inside the development VM
if [[ "$command" = "run" ]]; then
  check_umbrel_dev_environment
  if [ -z ${2+x} ]; then
    echo "A second argument is required!"
    exit 1
  fi
  run_in_vm "$2"
  exit
fi

# Get an SSH session inside the development VM
if [[ "$command" = "ssh" ]]; then
  check_umbrel_dev_environment
  run_in_vm bash
  exit
fi

# If we get here it means no valid command was supplied
# Show help and exit
show_help
exit 1
